-> method overloading and method overriding?

overloading refers to the existence of multiple methods with the same name
in a class but each accepting a different type or number of parameters.
overriding is when a method is being 'written over', tipically when a child
class overrides a method from the super/parent class.

-> what is stack memory and what is heap memory?

stack memory is memory allocated for local variables, parameters, addresses, etc.
heap memory is growing dynamically as the program runs. if there is heap memory available,
then it allocates that space (for example when we use 'new', the heap is growing).
we can run out of memory and have a 'stack overflow'

-> what is the garbage collector?

main use: to free up memory space that is not used anymore. when we use the 'new', the
heap is growing. when we dont use that object anymroe, the garbage collector comes and
cleans up space and the heap shrinks

-> what is shallow copy and deep copy?

shallow copy is when you point to a pointer pointing at an object/address. the changes to the
shallow copy will reflect the referenced object.
the deep copy will create each object of the referenced original object. basically a real copy

-> explain 'this' keyword in java?

when in a class' method and you want to use a outer local variable (because maybe you have a
parameter with the same name), you say this.x to refer to x as in the class' x not method's
parameter x

-> what is an abstract class ?

abstrac class it's more like an idea for classes. you cannot instantiate an abstract class, it
usually has abstract methods or simple methods. it's a template for other classes than creating
objects.
an interface is more like a 'contract'. you have methods that the classes which extent this said
interface must implement them. all of them.

-> what about 'super' keyword?

for example, used in a class constructor when we want to use the variables from the class in which
we extend.

-> 'generic' ?

for when we dont know the type yet

-> 'final' ? (always capitalize final variables)

final variable = cannot be changed
final class = cannot be extended
final function = cannot be overridden

-> 'protected' ?

we can access it only in the same package, but not outside it

-> difference between 'equals()' and '==' ?

we use == for reference and equals() for values

-> is java pass be value or pass by reference ?

passed by value

-> association, composition and aggregation ?

composition is when another class' object is within another class, like belonging or
logically related relationship
aggregation is when it has a 'has-a' relationship, something not tightly coupled
in association, there's no relationship, more like a 'objects know each other'

-> static block?

something before the main method runs

