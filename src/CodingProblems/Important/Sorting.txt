 Which Sorting Algorithm Should I Use?
 (Depends. Each algorithm comes with its own set of pros and cons.)

---------

Selection Sort: This sorting algorithm sorts an array by repeatedly finding the minimum element
(considering ascending order) from the unsorted part and putting it at the beginning. The algorithm
maintains two subarrays in a given array, the subarray which is already sorted, and the remaining
subarray which is unsorted. In every iteration of the selection sort, the minimum element
(considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray.

❤️ use this when: Selection sort is indeed suitable for small datasets and environments with
                        limited memory space because it has a simple implementation and requires
                        minimal auxiliary memory.
                     It has a time complexity of O(n^2), meaning its performance degrades quickly
                        as the dataset size increases. Therefore, for larger datasets, more
                        efficient algorithms like merge sort or quicksort are preferred.

---------

Bubble sort: This sorting algorithm is the simplest sorting algorithm that works by repeatedly
swapping the adjacent elements if they are in the wrong order. If we have total N elements, then
we need to repeat the above process for N-1 times.

❤️ use this when: Bubble sort is often considered a simple algorithm and is suitable for small
                        datasets or situations where simplicity is preferred over efficiency.
                     Its main advantage comes into play when the dataset is nearly sorted or
                        already sorted, as it requires fewer swaps in such cases.
                     However, its time complexity is also O(n^2), making it inefficient for
                        larger datasets compared to more advanced algorithms like merge sort or
                        quicksort.

---------

Insertion Sort: This sorting algorithm is a simple sorting algorithm that works the way we sort
playing cards in our hands. It places an unsorted element at its suitable place in each iteration.

❤️ use this when: If the data is nearly sorted or when the list is small as it has a complexity
                        of O(N^2) and if the list is sorted a minimum number of elements will slide
                        over to insert the element at its correct location.
                     This algorithm is stable and it has fast running case when the list is nearly
                        sorted.
                     The usage of memory is a constraint as it has space complexity of O(1).

❤️❤️=========❤️❤️
use selection sort when it comes to small datasets.
use insertion sort when it comes to partially sorted small datasets.
    -> it has O(N^2) for average-case time complexity
bubble is a weaker alternative for simplicity, but, in general, when it comes to big datasets, use:
merge sort or quick sort.
❤️❤️=========❤️❤️

Merge sort: This sorting algorithm is based on the Divide and Conquer algorithm. It divides the
    input array into two halves, calls itself for the two halves, and then merges the two sorted
    halves. The merge() function is used for merging two halves.

❤️ use  this when: Merge sort is often favored for sorting linked lists, where sequential access
                        is more efficient than random access. It also works well with arrays.
                      Merge sort has a consistent time complexity of O(n log n) regardless of the
                        initial order of elements, making it suitable for various scenarios.
                      In linked lists, merge sort has a consistent time complexity regardless of
                            the number of elements, making it a popular choice for sorting
                            linked lists efficiently.

---------

Quick sort: This sorting algorithm is also based on the Divide and Conquer algorithm. It picks an
            element as a pivot and partitions the given list around the picked pivot. After
            partitioning the list on the basis of the pivot element, the Quick is again applied
            recursively to two sublists i.e., the sublist to the left of the pivot element and
            the sublist to the right of the pivot element.

❤️ use this when: Quick sort is typically preferred for sorting large arrays, especially when
                        random access to elements is available. It has an average-case time
                        complexity of O(n log n), making it efficient for sorting large datasets.
                     It's particularly effective when dealing with arrays due to its partitioning
                        and recursive divide-and-conquer approach.
