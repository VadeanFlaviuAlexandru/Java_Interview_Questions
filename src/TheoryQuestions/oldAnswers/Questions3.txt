1. What does encapsulation mean in OOP and how does it help concretely?

Encapsulation is one of the core principles of object-oriented programming (OOP) and refers to
the bundling of data (attributes or properties) and methods (functions or procedures) that
operate on the data into a single unit or class. It hides the internal state of an object
from the outside world and only exposes the necessary interfaces for interacting with the object.

Here's how encapsulation helps concretely in OOP:

    Data Hiding: Encapsulation allows the internal state of an object to be hidden from
    external access. By declaring data members as private or protected, you prevent direct access
    to them from outside the class. This helps prevent unintended modifications or invalid state
    changes, enhancing the reliability and robustness of the code.

    Abstraction: Encapsulation enables abstraction by providing a clear separation between the
    interface (public methods) and the implementation details (private members) of a class.
    Users of the class only need to know how to interact with its public interface, without
    needing to understand its internal workings. This simplifies the usage of complex systems
    and promotes modularity and maintainability.

    Enhanced Security: By encapsulating data and providing controlled access through methods,
    encapsulation enhances security by preventing unauthorized access or modification of
    sensitive data. It allows you to enforce access control policies and implement additional
    security measures, such as validation checks and authentication mechanisms.

2. What is an abstract class and an interface. Differences and similarities.
When would you use one or the other.

Abstract classes and interfaces are both fundamental concepts in object-oriented programming
that facilitate abstraction and polymorphism. While they share similarities, they also have
key differences in their usage and capabilities.

Abstract Class:

An abstract class is a class that cannot be instantiated directly; it serves as a blueprint
for other classes to inherit from.
It can contain both abstract (unimplemented) methods and concrete (implemented) methods.
Abstract classes may also contain fields, constructors, and non-abstract methods.
Abstract classes support both inheritance and code reuse.

Interface:

An interface is a reference type similar to a class that defines a set of abstract methods.
Interfaces can only contain method signatures, constant variables (implicitly static and final),
and default methods (with implementation).
Classes implement interfaces, providing concrete implementations for all the abstract methods
declared in the interface.
Interfaces are used to define contracts, specifying what a class can do without specifying
how it does it.

*. a class can extend only one class, but implement multiple interfaces.
an abstract class can extend another single abstract class/default class or
implement multiple interfaces.
an interface can extend or inherit any number of interfaces, but not extend another class

3. What is polymorphism and how does it help us? How many types of polymorphism exist?
Any disadvantages?

Polymorphism refers to the ability of objects to exhibit different behaviors based on their
specific types or the context in which they are used. This means that the same method call or
operation may result in different behaviors depending on the actual object that receives the call.

Types of Polymorphism:

    Compile-Time Polymorphism (Static Polymorphism):
        Also known as method overloading and operator overloading.
        Resolved at compile time.
        Method overloading allows multiple methods with the same name but different parameter
        lists to coexist in the same class.
        Operator overloading allows operators to have different meanings in different contexts.

    Run-Time Polymorphism (Dynamic Polymorphism):
        Also known as method overriding and interface implementation.
        Resolved at runtime.
        Method overriding occurs when a subclass provides a specific implementation of a
        method that is already defined in its superclass.
        Interface implementation allows objects of different classes to be treated as objects of a
        common interface, enabling polymorphic behavior.

disadvantages: complexity, slight performance maybe but not anymore because of modern JVM,
                potential design issues.

4. Whatâ€™s the difference between Optimistic and Pessimistic concurrency models?

Optimistic and pessimistic concurrency control are two approaches used in database systems
to manage access to shared data by multiple transactions. They represent different strategies
for dealing with the possibility of conflicts between concurrent transactions.

Optimistic Concurrency Control:

    In optimistic concurrency control, transactions are allowed to proceed without any
    locking mechanisms initially.
    Each transaction is allowed to perform its operations without checking for conflicts with
    other transactions.
    Instead of locking data, optimistic concurrency control relies on detecting conflicts after
    the transactions have completed their operations.
    When a transaction attempts to commit, the database system checks whether any conflicts
    occurred during its execution.
    If conflicts are detected (e.g., another transaction modified the data being read or
    modified by the current transaction), the transaction may be aborted or rolled back.
    Optimistic concurrency control is often used in scenarios where conflicts between
    transactions are relatively rare, and the overhead of locking data for each transaction
    is deemed too high.

Pessimistic Concurrency Control:

    In pessimistic concurrency control, transactions acquire locks on data before performing
    any operations that could potentially lead to conflicts.
    Locks are obtained in advance to prevent other transactions from accessing or
    modifying the same data until the lock is released.
    CodingProblems.Transactions may acquire various types of locks, such as read locks (shared locks) or
    write locks (exclusive locks), depending on the type of access they require.
    Pessimistic concurrency control ensures that conflicts between transactions are avoided
    by preventing concurrent access to shared data.
    While effective at preventing conflicts, pessimistic concurrency control can lead
    to performance overhead, especially in scenarios where long-held locks delay other
    transactions and reduce concurrency.

5. Elaborate on Inheritance vs Composition

 Inheritance is a mechanism in which a new class (subclass or derived class) is created based
 on an existing class (superclass or base class). The subclass inherits attributes and behaviors
 (methods and fields) from the superclass.
 Composition is a design technique in which a class contains an instance of another class as a
 member. Rather than inheriting attributes and behaviors, a class uses instances of
 other classes to fulfill its functionality.