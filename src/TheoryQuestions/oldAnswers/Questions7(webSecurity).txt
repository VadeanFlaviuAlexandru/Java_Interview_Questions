1. What is OWASP?

OWASP stands for the Open Web Application Security Project. It is a nonprofit organization dedicated
to improving the security of software. OWASP provides resources, tools, and guidelines to help
organizations develop, deploy, and maintain secure web applications. One of the core activities of
OWASP is to identify and raise awareness about common security risks and vulnerabilities in web
applications through projects like the OWASP Top 10.

2. Explain sql injection and how we can defend against it.

SQL Injection is a type of attack where an attacker injects malicious SQL queries into input
fields of a web application, exploiting vulnerabilities in the application's code that directly
or indirectly interact with a database.

use parameterized queries or prepared statements. Parameterized queries separate SQL code from
user input, preventing injection attacks. alidate and sanitize user input to ensure it conforms
to expected formats and does not contain malicious characters or SQL commands.
Whitelist validation is the practice of only accepting input that is known to be good. for example
if you have a field where the user inputs his/her phone number you could just do a regex and
check that the values received are only numbers, drop everything else and just store the number.
Blacklisting is the practice of only rejecting input that is known to be bad.
Limit the permissions and privileges of database users to restrict their ability to execute
harmful commands or access sensitive data.
Implement database security measures such as strong authentication, access controls, and
encryption to protect against unauthorized access and data breaches.

3. Explain XSS and how we can defend against it.

Cross-Site Scripting (XSS) is a type of security vulnerability where attackers inject
malicious scripts into web pages viewed by other users. This can occur when user input
is not properly validated or sanitized, allowing attackers to execute arbitrary JavaScript
code in the context of other users' browsers. XSS attacks can lead to session hijacking,
phishing, and unauthorized access to sensitive information.
Validate and sanitize all user input to prevent the injection of malicious scripts.
Implement Content Security Policy (CSP) headers to restrict the sources from which content can
be loaded in a web page. CSP can help mitigate XSS attacks by blocking inline scripts and
restricting the domains from which external scripts can be loaded.
Set the HTTPOnly and Secure flags on cookies to prevent client-side scripts.
Keep web application frameworks, libraries, and dependencies up to date with the latest security patches.

4. Explain CSRF and how we can defend against it.

Cross-Site Request Forgery (CSRF) is a type of attack where an attacker tricks a user into
unknowingly performing actions on a web application without their consent. This is achieved by
exploiting the user's authenticated session with the application and tricking them into
making unintended requests, such as changing account settings or initiating transactions.
Implement CSRF tokens in web forms and AJAX requests to validate the authenticity of requests.
CSRF tokens are unique tokens generated by the server and included in the form or request payload
Require user confirmation for sensitive actions to prevent CSRF attacks from being executed
without the user's explicit consent. This can include additional authentication steps or
confirmation dialogs for critical operations.

5. What is over-posting and how we can defend against it.

Over-posting, also known as Mass Assignment, is a security vulnerability that occurs when an
attacker submits additional form fields with manipulated data in an HTTP request, exploiting
the automatic binding of data between web forms and server-side models. This can lead to
unauthorized modification of data or elevation of privileges within the application.
Use Data Transfer Objects to transfer data between web forms and server-side models,
allowing fine-grained control over which properties are allowed to be updated.
Validate and sanitize all incoming data to ensure it conforms to expected formats and
does not contain malicious or unexpected values.